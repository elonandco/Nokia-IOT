/**
 * Created by jlmayorga on 4/21/16.
 */

export enum FormElementValidationType{
  required, pattern, minlength, maxlength, equivalent, notEquivalent
}
export class FormElementValidation {
  type:string;
  errorMessage:string;
  expression:any;
}

export class BaseFormElement<T> {
  value:T;
  key:string;
  label:string;
  tooltip:string;
  text:string;
  class:string;
  checked:string;
  placeholder:string;
  required:boolean;
  order:number;
  accept:string;
  id:string;
  controlType:string;
  validationExpression:string;
  validations:Array<FormElementValidation>;

  constructor(options:{
    value?:T,
    key?:string,
    label?:string,
    placeholder?:string,
    checked?:string,
    accept?:string,
    id?:string,
    tooltip?:string,
    text?:string,
    required?:boolean,
    class?:string,
    order?:number,
    controlType?:string,
    validationExpression?:string
  } = {}) {
    this.value = options.value;
    this.key = options.key || '';
    this.label = options.label || '';
    this.placeholder = options.placeholder || '';
    this.accept = options.accept || '';
    this.id = options.id || '';
    this.text = options.text || '';
    this.checked = options.checked || '';
    this.tooltip = options.tooltip || '';
    this.class = options.class || '';
    this.required = !!options.required;
    this.order = options.order === undefined ? 1 : options.order;
    this.controlType = options.controlType || '';
    this.validationExpression = options.validationExpression;
  }

}

export class StaticFormElement extends BaseFormElement<string> {

}

export class TextFormElement extends BaseFormElement<string> {
  controlType = 'textbox';
  type:string;

  constructor(options:{} = {}) {
    super(options);
    this.type = options['type'] || '';
  }
}

export class ButtonFormElement extends BaseFormElement<string> {
  controlType = 'button';
  type:string;

  constructor(options:{} = {}) {
    super(options);
  }
}

export class TimeOfDayFormElement extends BaseFormElement<string> {
  controlType = 'timeofday';
  type:string;

  constructor(options:{} = {}) {
    super(options);
  }
}

export class DateFormElement extends BaseFormElement<string> {
  controlType = 'date';
  type:string;

  constructor(options:{} = {}) {
    super(options);
    this.type = options['type'] || '';
  }
}

export class FileFormElement extends BaseFormElement<string> {
  controlType = 'file';
  type:string;

  constructor(options:{} = {}) {
    super(options);
    this.type = options['type'] || '';
  }
}

export class TextAreaFormElement extends BaseFormElement<string> {
  constructor(options:{} = {}) {
    super(options);
  }
}

export class SelectFormElement extends BaseFormElement<string> {
  controlType = 'dropdown';
  options:{key:string, value:string}[] = [];

  constructor(options:{} = {}) {
    super(options);
    this.options = options['options'] || [];
  }
}

export class RadioFormElement extends BaseFormElement<string> {
  controlType = 'radio';
  groupId = '';

  constructor(options:{} = {}) {
    super(options);
    this.groupId = options['groupId'] || '';
  }
}

export class CheckBoxFormElement extends BaseFormElement<string> {
  controlType = 'checkbox';

  constructor(options:{} = {}) {
    super(options);
  }
}
