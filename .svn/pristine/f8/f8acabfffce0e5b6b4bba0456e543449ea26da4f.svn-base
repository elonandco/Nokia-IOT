import {Component} from '@angular/core';
import {Router, RouteData} from '@angular/router-deprecated';
import {WorkflowComponent} from '../../../../core/components/workflow/workflow.component';
import {ResetPasswordService} from '../../../../custom/components/account/reset-password/reset-password-service';
import {AuthenticationService} from '../../../../core/services/authentication.service';
import {Store} from '@ngrx/store';
import {Observable} from 'rxjs/Observable';


@Component({
  selector: 'reset-password',
  templateUrl: '/src/custom/components/account/reset-password/reset-password.component.html',
  providers: [ResetPasswordService],
  directives: [WorkflowComponent]
})

export class ResetPasswordComponent implements OnInit{
dsoObs:Observable<any>;
workflowConvetextObs:Observable<any>;

componentType:string = "";
private type:string;
workflowName:string;

workflowOperations:Array<any> = [];
refreshOperation:Object;

workflowActive:boolean = false;
resetPasswordActive:boolean = false;
componentActive:boolean = false;
workflowHidden:boolean = false;
private message:string = "";
private status:string = "";
private _resetPasswordService: ResetPasswordService;

title:string = 'Reset Password';
columnsArray:Array<any> = [];
columnData:Array<any> = [];

  constructor(private _router:Router, private _store:Store<any>, data:RouteData,public _resetPasswordService: ResetPasswordService,private _authService:AuthenticationService) {
    this.type = data.get('type');
      this._store = _store;
      this.dsoObs = _store.select('DSOModelReducer');
      this.workflowConvetextObs = _store.select('WorkflowContextReducer');
      this._resetPasswordService = _resetPasswordService;
      this._resetPasswordService.getResetPassword();
      this.status = this._resetPasswordService.status;
      this.message = this._resetPasswordService.message;
      this.resetStatus = this._resetPasswordService.password_status;
      this.action_required = this._resetPasswordService.resetPasswordStatus;

      this.dsoObs.subscribe((data:any)=> {
          let services = _.find(data.domains.domain, function (domain:any) {
            return domain.id === "Menu"
          }).services.service;
          let Campaigns = _.find(services, function (service:any) {
            return service.id === "AccountSettings"
          });

          if (Campaigns != undefined && Campaigns.operations != undefined){
            var operations = _.cloneDeep(Campaigns.operations.operation);
            this.refreshOperation = _.remove(operations,function(operation){
              return operation.attributes.hasOwnProperty('type') && operation.attributes.type === "refresh"
            })[0];
            _.remove(operations,function(operation){
              return operation.attributes.hasOwnProperty('type') && operation.attributes.type === "refresh_widget"
            })[0];
            this.workflowOperations = operations;
            } else {
            console.log("Widget::Campaigns Doesn't contained expected operations")

          }

        },
        error => {

        }
      )

      this.workflowConvetextObs.subscribe((data:any)=> {
          this.action_required = data.globalContext.initActionRequired;
          this.resetStatus = data.globalContext.resetPasswordStatus;

          if (this.resetStatus === "SUCCESS" && this.action_required === "relogin"){
            //this.logout()
          }

        },
        error => {

        }
      )
  }

  ngOnInit() {
    let AddCampaign = _.find(this.workflowOperations, function (operation) {
      return operation.id === "EAP_IOT_RESET_PASSWORD"
    });

    if (this.workflowOperations != undefined && AddCampaign != undefined){
      this.workflowName = "EAP_IOT_RESET_PASSWORD";
      this.workflowActive = true;
    } else {
      console.log("Widget::Campaigns workflowOperations missing")
    }
  }

  isDone(evt) {
      this.workflowHidden = true;
      switch (this.type) {
        case 'ResetPassword':
        {
          this.logout();
          this.workflowActive = false;
          //this.initCampaigns();
          this.resetPasswordActive = true;
          this.componentActive = true;
          this.componentType = 'Accounts';
          break;
        }
      }

      let link = ['Dashboard'];
      this._router.navigate(link);
    }

  onOperationClick(evt:Event) {
      this.hideComponent();
      this.runWorkflow(evt.target.getAttribute('operation'))
    }

  logout(){
      this._authService.logout()
      this._router.navigate(['Login']);
  }

  hideComponent(){
      switch (this.type) {
        case 'AccountSettings':
        {
          this.resetPasswordActive = false;
          this.componentActive = false;
          break;
        }
      }
    }

  runWorkflow(operation:string){
      this.workflowName = operation;
      this.workflowHidden = false;
      this.workflowActive = true;
    }

  onClose(evt:Event) {
    if (this.resetStatus !== "SUCCESS" && this.action_required !== "relogin"){
        let link = ['Dashboard'];
        this._router.navigate(link);
    }
  }

  onRefresh(evt:Event){
      this.hideComponent();
      this.runWorkflow(this.refreshOperation.operationName);
    }
}
